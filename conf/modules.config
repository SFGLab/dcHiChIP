/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${meta.type}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }


    withName: FILTER_QUALITY {
        //cpus   = { check_max( params.fastqsplitter_cpus    * task.attempt, 'cpus' ) }
        //memory = { check_max(  ( params.fastqsplitter_memory as nextflow.util.MemoryUnit) * task.attempt, 'memory' ) }
        //time = { check_max(  ( params.fastqsplitter_walltime  as nextflow.util.Duration) * task.attempt, 'time' ) }
        ext.args = { params.filter_quality_args == null ? " -F 0x04 -q ${params.mapq} " : params.filter_quality_args}
        ext.prefix = "filtered"
        publishDir = [
            path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}/${meta.type}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : "${meta.id}_${filename}" }
        ]
    }

    withName: BWA_MEM {
        ext.args = { params.bwa_mem_args == null ? " -M -v 0  " : params.bwa_mem_args}
        ext.args2 = { params.bwa_mem_samtools_args == null ? " -bh " : params.bwa_mem_samtools_args}
    }
    withName: REMOVE_DUPLICATES {
        ext.args = " -n "
    }

    withName: MACS3_CALLPEAK {
        ext.args = " --nomodel -q ${params.peak_quality} -B --format BAMPE "
    }

    withName: MAPS {
        ext.args = " -n 1 -a ${params.mapq} "
    }

    withName: JUICERTOOLS {
        ext.args = " ${params.ref_short} "
    }

    withName: DEEPTOOLS_PLOTCOVERAGE {
        ext.args = " --skipZeros "
    }

    withName: GSTRIPE {
        ext.args = " --fix_bin_start "
    }

    withName: DEEPTOOLS_PLOTCORRELATION {
        ext.args = " --skipZeros --plotTitle \"Spearman Correlation of Read Counts\"  --colorMap RdYlBu --plotNumbers "
    }
    withName: PAIRTOOLS_PARSE2 {
        ext.args = " --drop-sam --drop-seq --assembly hg38 --no-flip "
    }
    withName: COOLER_CLOAD {
        ext.args = " pairs --zero-based  -c1 2 -p1 3 -c2 4 -p2 5 "
    }
    withName: COOLER_ZOOMIFY {
        ext.args = " -r ${params.cooler_zoomify_res} --balance --balance-args '--cis-only --mad-max 5' "
    }
    withName: COOLTOOLS_EIGSCIS {
        ext.args = " --n-eigs 1 "
    }

    withName: MULTIMM {
        /*
        def args_val = " --platform ${params.multimm_platform} "
        if (params.mulitmm_modelling_level.toLowerCase() == "gene"){
            args_val = "${args_val} --gene_name ${params.multimm_gene_name}"
        }else{
            if (["region", "gw", "chrom"].contains(params.mulitmm_modelling_level.toLowerCase())){
                args_val = "${args_val} --chrom ${params.multimm_chrom}"
            }
            if (["region"].contains(params.mulitmm_modelling_level.toLowerCase())){
                args_val = "${args_val} --loc_start ${params.multimm_loc_start} --loc_end ${params.multimm_loc_end}"
            }
        }
        def args_val = " --platform ${params.multimm_platform} --modelling_level ${params.mulitmm_modelling_level} --chrom ${params.multimm_chrom} "
        */
        
        ext.args = " --platform CPU --modelling_level gw --chrom 1 "
    }
    
    withName: "BWA_MEM_SE_R1|BWA_MEM_SE_R2" {
        ext.args = { params.se_bwa_mem_args == null ? " " : params.se_bwa_mem_args}
        ext.args2 = { params.se_samtools_args == null ? " -n " : params.se_samtools_args}
    }
    withName: BWA_MEREG {
        ext.args = { params.bwa_merge_args == null ? " -n -f " : params.bwa_merge_args}
    }
    withName: SAMTOOLS_FIXMATE {
        ext.args = { params.samtools_fixmate_args == null ? " -m " : params.samtools_fixmate_args}
    }
    withName: FILTER_PAIRES {
        ext.args = " --mapq ${params.mapq} "
    }
    withName: SAMTOOLS_MARKDUP {
        ext.args = " -r -m s -s -f fixmated.markdup.stats -d ${params.optical_duplicate_distance} "
    }
    withName: SAMTOOLS_SORT_2 {
        ext.args = " -n "
    }
    withName: SAMTOOLS_MARKDUP {
        ext.prefix = "markdup"
    }
}
